/**
 * @file CW_Memory_Allocator_Memory_Management_Definitions.h
 *
 * @date 22-05-2014
 * @author Kamil Sorokosz
 * @brief File contains a simple memory management module
 */

#ifndef _CW_MEMORY_ALLOCATOR_MEMORY_MANAGEMENT_DEFINITIONS_H_
#define _CW_MEMORY_ALLOCATOR_MEMORY_MANAGEMENT_DEFINITIONS_H_

#include "CW_Memory_Allocator_Definitions.h"
#include "CW_Memory_Allocator_Types.h"

/** Memory cache structure */
typedef struct CW_Memory_Cache
{

} CW_Memory_Cache;

/**
 * Allocate memory
 *
 * @param CW_memory_size - memory size
 * @return void* - pointer to memory block
 */
void* CW_allocate_memory( CW_uint32_t CW_memory_size );

/**
 * Free memory
 *
 * @param CW_pointer - pointer to memory block
 */
void CW_free_memory( void** CW_pointer );

/**
 * Create memory cache
 *
 * @param CW_memory_cache_size - memory cache size
 * @param cw_memory_cache - pointer to memory cache
 */
void CW_create_memory_cache( CW_uint32_t CW_memory_cache_size, CW_Memory_Cache* const cw_memory_cache );

/**
 * Allocate memory inside memory cache
 *
 * @param CW_memory_cache - memory cache
 * @param CW_memory_size - memory size which will be allocated
 */
void* CW_allocate_memory_from_cache( CW_Memory_Cache* const CW_memory_cache, CW_uint32_t CW_memory_size );

/**
 * Free memory from memory cache
 *
 * @param CW_memory_cache - memory cache
 * @param CW_pointer - pointer which will be free
 */
void CW_free_memory_from_cache( CW_Memory_Cache* const CW_memory_cache, void* CW_pointer );

/**
 * Remove memory cache
 *
 * @param CW_memory_cache - memory cache
 */
void CW_remove_memory_cache( CW_Memory_Cache* const CW_memory_cache );

/** MALLOC macro which should be used instead of malloc */
#define MALLOC( block_type, blocks_number ) (block_type*)CW_allocate_memory( ( blocks_number )* sizeof( block_type ) );

/** FREE macro which should be used instead of free */
#define FREE( pointer ) CW_free_memory( (void**)&pointer );

/** CREATE_MEMORY_CACHE macro which should be used instead of CW_create_memory_cache */
#define CREATE_MEMORY_CACHE( memory_cache_size, memory_cache ) CW_create_memory_cache( memory_cache_size, memory_cache );

/** MALLOC_STATIC macro which should be used instead of CW_allocate_memory_from_cache */
#define MALLOC_STATIC( memory_cache, block_type, blocks_number ) (block_type*)CW_allocate_memory_from_memory_cache( (blocks_number) * sizeof(block_type) );

/** FREE_STATIC macro which should be used instead of CW_free_memory_from_cache */
#define FREE_STATIC( memory_cache, pointer ) CW_free_memory_from_cache( memory_cache, pointer );

/** REMOVE_MEMORY_CACHE macro which should be used instead of CW_remove_memory_cache */
#define REMOVE_MEMORY_CACHE( memory_cache ) CW_remove_memory_cache( memory_cache );

#endif /* _CW_MEMORY_ALLOCATOR_MEMORY_MANAGEMENT_DEFINITIONS_H_ */
