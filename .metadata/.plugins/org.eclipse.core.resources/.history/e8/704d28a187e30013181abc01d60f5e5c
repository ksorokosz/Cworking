/**
 * @file CW_Memory_Allocator_Memory_Management_Definitions.h
 *
 * @date 22-05-2014
 * @author Kamil Sorokosz
 * @brief File contains a simple memory management module
 */

#ifndef _CW_MEMORY_ALLOCATOR_MEMORY_MANAGEMENT_DEFINITIONS_H_
#define _CW_MEMORY_ALLOCATOR_MEMORY_MANAGEMENT_DEFINITIONS_H_

#include "CW_Memory_Allocator_Definitions.h"
#include "CW_Memory_Allocator_Types.h"

/** Memory space structure */
typedef struct CW_Memory_Space
{

} CW_Memory_Space;

/**
 * Allocate memory
 *
 * @param CW_memory_size - memory size
 * @return void* - pointer to memory block
 */
void* CW_allocate_memory( CW_uint32_t CW_memory_size );

/** Free memory */
void CW_free_memory( void** CW_pointer );

/** Create memory space */
void CW_create_memory_space( CW_uint32_t CW_memory_space_size, CW_Memory_Space* const cw_memory_space );

/** Allocate memory inside memory space */
void* CW_allocate_memory_from_space( CW_Memory_Space* const CW_memory_space, CW_uint32_t CW_memory_size );

/**
 *
 * @param CW_memory_space
 * @param CW_pointer
 */
void CW_free_memory_from_space( CW_Memory_Space* const CW_memory_space, void* CW_pointer );

/** MALLOC macro which should be used instead of malloc */
#define MALLOC( block_type, blocks_number ) (block_type*)CW_allocate_memory( ( blocks_number )* sizeof( block_type ) );

/** FREE macro which should be used instead of free */
#define FREE( pointer ) CW_free_memory( (void**)&pointer );

#endif /* _CW_MEMORY_ALLOCATOR_MEMORY_MANAGEMENT_DEFINITIONS_H_ */
