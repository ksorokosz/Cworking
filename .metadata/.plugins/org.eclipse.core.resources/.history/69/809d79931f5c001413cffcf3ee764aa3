#include <cstdio>

/* Attention integer number should be changed in case bigger number! */

/* Calculate NWD */
inline int algorithm_euclidian(int a, int b)
{
	/* Absolute value for negative numbers */
	a = a < 0 ? -a : a;
	b = b < 0 ? -b : b;

	/*Declare temporary value */
	int c = 0;

	/* Calculate rests */
	while ( b != 0 )
	{
		/* Module division */
		c = a % b;

		/* Replacing */
		a = b;
		b = c;
	}

	/* Return NWD */
	return a;
}


inline long int algorithm_extended_euclidian( long int a, long int b )
{
	/* Absolute value for negative numbers */
	a = a < 0 ? -a : a;
	b = b < 0 ? -b : b;

	/*Declare temporary values */
	long int a_tmp;
	long int c, quot, r, q, p, s;
	long int r_tmp, s_tmp;

	/* a must be greater than b */
	if ( b > a )
	{
		a_tmp = a;
		a = b;
		b = a_tmp;
	}

	/* Initialize values */
	c = quot = 0;
	r = q = 0;
	p = s = 1;

	/* Calculate rests */
	while ( b != 0 )
	{
		/* Modulo division */
		c = a % b;

		/* Integer division */
		quot = a / b;

		/* Replacing */
		a = b;
		b = c;

		/* Store r, s in temporary */
		r_tmp = r; s_tmp = s;

		/* Update r and s */
		r = p - quot * r;
		s = q - quot * s;

		/* Update p and q */
		p = r_tmp; q = s_tmp;
	}

	/* Return NWD */
	return p * a + q * b;
}
